Magesh Kuppan

Methodology:
    Handon Driven
    No Powerpoints

Schedule
    Commence    : 10:00
    Tea Break   : 11:30 (20 mins)
    Lunch Break : 13:30 (1 Hr)
    Tea Break   : 16:00 (20 mins)
    Windup      : 18:00

About You:
    1. Name
    2. Total Experience
    3. Primary Skillset
    4. Experience in Golang (if any)


Why Go?
    1. Best of C++ and Python
    2. Better Security features
    3. Memory Handling support
    4. Restful services & microservices (SDK API)
    5. Testability
    6. Ease of concurrency
    7. Ease of deployment
    8. Statically compiled
    9. More intuitive syntax
    10. Ease of implementing better practices


    1. compiled
    2. Memory management
    3. Performance comparable to 'C'
    4. Secured (No Pointer arithmetic)

    1. Simplicity
        for, if else, switch case, function, var (only 25 keywords)
        1. No classes (only structs & functions)
        2. No inheritance (only composition)
        3. No exceptions (only errors)
        4. No access modifiers
        5. No generics

    2. Built for Concurrency
        goroutines (functions executed concurrently)
        1. Built in the language 
            go keyword, 
            channel data type
            select construct
            <- operator (channel operations)
        2. 1000s of go routines in one OS thread
        3. 2 KB of memory per go routine
        4. Built in scheduler

    3. Ease of deployment
        1. Single binary
        2. No runtime dependencies (VM)
        

To run a go program
    go run <filename>

To create a build
    go build <filename>
    go build -o <binary name> <filename>

Data Types in Go
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64(real float32, imaginary float32)
    complex128(real float64, imaginary float64)

    byte (alias of uint8)
    rune (alias of int32) (representing a unicode character)


        
Assignment : Find out the first 20 prime numbers starting from 5


Functions
    - Supports variadic function
    - supports higher order functions


Composite Types
    1. Array
        Collection of data of the same type
        Fixed size
        Indexed (starts from 0)

    2. Slice
        Collection of data of the same type
        Variable size
        Indexed (starts from 0)
        Pointer to an underlying array
        Use the append() function to add elements to the slice

    3. Map
        Collection of key-value pairs
        Variable size
        Accessible by key
        Use the delete() function to remove elements from the map

Modularity
    Modules
    Packages

    Before go 1.13
        $GOPATH
            /bin
            
            /pkg

            /src
                github.com
                    tkmagesh
                        app1
                            main.go
                                import "github.com/tkmagesh/app1/calculator"
                            calcualtor
                                calc.go

                        app2

To create a module
    go mod init myapp
        -> creates a module named myapp (go.mod)

To use third party modules
    go get github.com/fatih/color

    The source code for github.com/fatih/color is in $GOPATH/pkg/github.com/fatih/color

    go mod tidy
        updating the go.mod file to reflect the current state of the module

    go mod vendor
        copies the source code for the modules into the <app>/vendor directory


Methods
    Are function with receivers
    the receivers can be "value" or "pointers"
    can be invoked with value or pointer references
    can be created only for local types (type within the same package)
    can access methods belong to the "composed" Types
    
Type alias


Methods Assignment
    1. create a module for the application
    2. create the following packages
        model
            product struct
            methods
                format
                applyDiscount
        collection
            products type
            methods
                format
                filter
                indexOf
                includes
                any
                all


Interfaces Assignment
    Create a sort method in the products collection using which the user should be able to sort the collection by ANY attribute
    IMPORTANT: use the sort.Sort() API

Concurrency
    WaitGroup

IO
    io package
        Writer
        Reader
    os package
    ioutil package
    bufio package
        

GRPC

    DCOM
    MTS

    .NET Remoting
    RMI (Java)

    CORBA

    Web
        IP Address & URL
        TCP
        HTTP
        XML

        Web Services
            XML
            SOAP (Simple Object Access Protocol)
            WSDL (Web Service Description Language)
        
        REST services
        Data as a resource
            JSON
            URL
                http://myapp.com/products
                http://myapp.com/products/P101
                http://myapp.com/categories/stationary/products

            OPERATIONS
                http verbs
                    GET
                    POST
                    PUT
                    PATCH
                    DELETE
                    HEAD
                    OPTIONS

            RESPONSES
                http status codes
                200 OK
                201 Created
                202 Accepted
                204 No Content
                302 Found
                304 Not Modified
                400 Bad Request
                401 Unauthorized
                403 Forbidden
                404 Not Found
                500 Internal Server Error

    Web
        Advantages
            Tech agnostic
            Text based

        Disadvantages
            payload size
            HTTP Stateless
            ONLY request & response was possible
            Realtime updates were very difficult


    
Read Optimized append only
Transactional
Read optimized (allow updates)
Analytical
Realtime

GRPC
    serialization is using protocol buffer



